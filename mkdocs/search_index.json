{
    "docs": [
        {
            "location": "/",
            "text": "Mezzanine API\n\n\nRESTful API for Mezzanine CMS\n\n\n\n\nOverview\n\n\nMezzanine API is a \nRESTful API\n using \nJSON\n serialization and protected with \nOAuth 2\n. It is an extension \nfor the \nMezzanine\n content management platform, built using the \nDjango\n framework. The API empowers developers to \nautomate, \nextend and combine Mezzanine with other services\n such as mobile apps.\n\n\n\n\nMezzanine API is in development.\n\n\nCheck back regularly here and on \nPyPi\n/\nGithub\n for updates to the documentation and package, respectively. \n\n\nTell us what you need from the API so we can prioritize improvements. \n\n\n\n\nAccess all the data your frontend needs\n\n\nREST API resources for posts, categories, comments, pages, users, and public site data.\n\n\nWe care about security\n\n\nThat's why OAuth2 is utilized for authentication, allowing users to authorize and revoke access to third party \napplications without the need for those applications to request the user's confidential credentials. Member's only \npages can only be accessed over the API if the requesting user is authenticated and has permission.\n\n\nFilter and search results\n\n\nApply filters such as \nposts?date_min=2015-01-01\ncategory=2\n or search \nposts?search=fitness\n to narrow down results. \nResults are paginated to handle large datasets.\n\n\nInteractive endpoint documentation\n\n\nThe best way to learn about the API is via the interactive resource documentation which utilizes the popular \nSwagger \nUI\n.\n\n\nEasy to customize\n\n\nThe API leverages \nDjango Rest Framework\n which has a large active community.\n\n\n\n\n\n\nInstallation\n\n\nIn order to install Mezzanine API you'll need \nPython\n installed on your system, as well as the \nMezzanine\n CMS.  \n\n\n\n\n\n\nInstall the \nmezzanine-api\n package using pip:\n\n\n$ pip install mezzanine-api\n\n\n\n\n\n\n\nAdd the following apps in this order to \nINSTALLED_APPS\n in your Mezzanine \nsettings.py\n:\n\n\nINSTALLED_APPS = (\n    ...\n    'mezzanine_api',\n    'rest_framework',\n    'rest_framework_swagger',\n    'oauth2_provider',\n)\n\n\n\n\n\n\n\nAlso, add the following lines at the end of your \nsettings.py\n module:\n\n\n#####################\n# REST API SETTINGS #\n#####################\ntry:\n    from mezzanine_api.settings import *\nexcept ImportError as e:\n    pass\n\n\n\n\n\n\n\nFor Mezzanine 4.1.0 and above, add the following code in your Mezzanine \nurls.py\n somewhere after \nurlpatterns += [\n (approx line 29):\n\n\n# REST API URLs\nurl(\"^api/\", include(\"mezzanine_api.urls\")),\n\n\n\n\n\n\n\nMigrate the database to support OAuth2:\n\n\n$ python manage.py migrate\n\n\n\n\n\n\n\nStart the server:\n\n\n$ python manage.py runserver\n\n\n\n\n\n\n\n\n\nEndpoint Resources\n\n\nThe best way to learn about the API resources is via the interactive resource documentation which utilizes the popular \nSwagger \nUI\n. Open up \nhttp://127.0.0.1:8000/api/docs/\n in your browser, and you'll see the \ninteractive endpoint resource documentation being displayed (refer to above screenshot). Here you can easily test out the \ndifferent kinds of endpoint, method, and query parameter whilst you are learning.\n\n\nAlso, if you attempt to access the API itself directly in your browser, you will be shown a browsable web API:\n\n\n\nEnjoy designing a frontend to interact with the REST API using your technology of choice! Alternatively, you can use it \nto automate, analyse, extend and combine Mezzanine with other services.\n\n\nPagination\n\n\nIn order to handle large datasets, pagination is employed. To be consistent, all \nlisting\n type endpoints \nprovide a structure that allows for pagination. Please use a \"page\" parameter to fetch multiple pages of records. For\n example listing categories with \ncategories?page=2\n will return a JSON structure similar to this:\n\n\n{\n    \"count\": ...,\n    \"next\": \"http://127.0.0.1:8000/api/categories?page=3\",\n    \"previous\": \"http://127.0.0.1:8000/api/categories\",\n    \"results\": [\n        {\n            ...\n        }\n    ]\n}\n\n\n\nPermissions\n\n\nBlog posts and categories may be created or updated over the API by a \nsuperuser\n. This enables you to make new blog posts, for \nexample, using your own innovative frontend or web hooks. Note that this writable access is currently an experimental \nfeature and should be used with caution. There are plans to gradually open up the rest of the API for write access over forthcoming releases. \n\n\nNote that the \nusers\n resource is provided so that you can carry out tasks such as retrieving the current user's \ndetails, view a blog post author's name, and list suggested usernames for predicted text entry. For privacy, the email \nfield can only be accessed by the relevant owner or a \nsuperuser\n. However, the author's full name is accessible to all\nby default (if provided) since blogs tend to operate on a real name basis. If you wish to customize this, take a look \nat the \nUserSerializer\n class.\n\n\nSecure communication\n\n\nYou SHOULD use HTTPS in production!\n\n\nIn this guide, we consider a development environment on a local machine and connect to the server over HTTP. Whereas for production, you SHOULD use HTTPS for secure communication over the internet. Without it, all the API and Mezzanine authentication mechanisms can be compromised.\n\n\nAuthenticate with sessions\n\n\nSession authentication is enabled by default. It can be disabled by commenting out the relevant line in \nsettings.py\n. If you wish to use session based authentication for write access as well as read access, you will need to setup a valid CSRF token for any PUT or POST requests. See the \nDjango CSRF documentation\n for more details.\n\n\nAuthenticate with OAuth2\n\n\nRegister\n\n\nOpen up \nhttp://127.0.0.1:8000/api/oauth2/applications/register/\n in your browser. (If you are using API version \n= 0.3.0, you may experience a 404 error. To resolve this, add the line \nLOGIN_URL = \"/api/auth/login/\"\n to your \nsettings.py\n.)\n\n\nGo ahead and register a new OAuth application. Just enter a reference name, choose \nconfidential\n client type and \n\n...password-based\n authorization grant type:\n\n\n\n\nRequest your access token to use for API authentication:\n\n\n$ curl -X POST -H \"Accept: application/json; indent=4\" \\\n  -d \"grant_type=password\nusername=\nusername\npassword=\npassword\n\" -u\"\nclient_id\n:\nclient_secret\n\" \\\n  http://localhost:8000/api/oauth2/token/\n\n\n\nFor \nclient_id\n and \nclient_secret\n, copy and paste those that you were given in the previous step. The \nusername\n and \n\npassword\n are the credentials of the Mezzanine user you wish to login as. You will get a JSON response like:\n\n\n{\n    \"access_token\": \"\nyour_access_token\n\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 36000,\n    \"refresh_token\": \"\nyour_refresh_token\n\",\n    \"scope\": \"read write groups\"\n}\n\n\n\nTest\n\n\nThe following test should \nfail\n (i.e. no user listings shown) if you are not currently authenticated:\n\n\n$ curl http://localhost:8000/api/users\n\n{\n    \"detail\": \"Authentication credentials were not provided.\"\n}\n\n\n\nThe following authenticated test should \nsucceed\n and show you a list of users if you registered OAuth with a \n\nsuperuser\n account:    \n\n\n$ curl -H \"Authorization: Bearer \nyour_access_token\n\" http://localhost:8000/api/users\n\n\n\nYou can also test your access token by entering it at the top of your interactive \n\nAPI Resource Documentation\n page.\n\n\nGetting help\n\n\nIf you have questions about the API, consider leaving a message in our \nGitter chat room\n or using the general \nMezzanine discussion group\n.\n\n\nOtherwise, if you think you have found a bug, please use \nGitHub issues\n and include the steps necessary to reproduce\n it.\n\n\nContributing\n\n\nMezzanine API is an open source project managed using the Git version control system. The repository is hosted\non \nGitHub\n, so contributing is as easy as forking the project and committing back your enhancements.\n\n\nRoadmap\n\n\n\n\nRefinement\n\n\nGradual roll-out of writeable API access\n\n\nMore tests\n\n\nFurther documentation\n\n\nExample API client",
            "title": "Home"
        },
        {
            "location": "/#mezzanine-api",
            "text": "RESTful API for Mezzanine CMS",
            "title": "Mezzanine API"
        },
        {
            "location": "/#overview",
            "text": "Mezzanine API is a  RESTful API  using  JSON  serialization and protected with  OAuth 2 . It is an extension \nfor the  Mezzanine  content management platform, built using the  Django  framework. The API empowers developers to  automate, \nextend and combine Mezzanine with other services  such as mobile apps.   Mezzanine API is in development.  Check back regularly here and on  PyPi / Github  for updates to the documentation and package, respectively.   Tell us what you need from the API so we can prioritize improvements.",
            "title": "Overview"
        },
        {
            "location": "/#access-all-the-data-your-frontend-needs",
            "text": "REST API resources for posts, categories, comments, pages, users, and public site data.",
            "title": "Access all the data your frontend needs"
        },
        {
            "location": "/#we-care-about-security",
            "text": "That's why OAuth2 is utilized for authentication, allowing users to authorize and revoke access to third party \napplications without the need for those applications to request the user's confidential credentials. Member's only \npages can only be accessed over the API if the requesting user is authenticated and has permission.",
            "title": "We care about security"
        },
        {
            "location": "/#filter-and-search-results",
            "text": "Apply filters such as  posts?date_min=2015-01-01 category=2  or search  posts?search=fitness  to narrow down results. \nResults are paginated to handle large datasets.",
            "title": "Filter and search results"
        },
        {
            "location": "/#interactive-endpoint-documentation",
            "text": "The best way to learn about the API is via the interactive resource documentation which utilizes the popular  Swagger \nUI .",
            "title": "Interactive endpoint documentation"
        },
        {
            "location": "/#easy-to-customize",
            "text": "The API leverages  Django Rest Framework  which has a large active community.",
            "title": "Easy to customize"
        },
        {
            "location": "/#installation",
            "text": "In order to install Mezzanine API you'll need  Python  installed on your system, as well as the  Mezzanine  CMS.      Install the  mezzanine-api  package using pip:  $ pip install mezzanine-api    Add the following apps in this order to  INSTALLED_APPS  in your Mezzanine  settings.py :  INSTALLED_APPS = (\n    ...\n    'mezzanine_api',\n    'rest_framework',\n    'rest_framework_swagger',\n    'oauth2_provider',\n)    Also, add the following lines at the end of your  settings.py  module:  #####################\n# REST API SETTINGS #\n#####################\ntry:\n    from mezzanine_api.settings import *\nexcept ImportError as e:\n    pass    For Mezzanine 4.1.0 and above, add the following code in your Mezzanine  urls.py  somewhere after  urlpatterns += [  (approx line 29):  # REST API URLs\nurl(\"^api/\", include(\"mezzanine_api.urls\")),    Migrate the database to support OAuth2:  $ python manage.py migrate    Start the server:  $ python manage.py runserver",
            "title": "Installation"
        },
        {
            "location": "/#endpoint-resources",
            "text": "The best way to learn about the API resources is via the interactive resource documentation which utilizes the popular  Swagger \nUI . Open up  http://127.0.0.1:8000/api/docs/  in your browser, and you'll see the \ninteractive endpoint resource documentation being displayed (refer to above screenshot). Here you can easily test out the \ndifferent kinds of endpoint, method, and query parameter whilst you are learning.  Also, if you attempt to access the API itself directly in your browser, you will be shown a browsable web API:  Enjoy designing a frontend to interact with the REST API using your technology of choice! Alternatively, you can use it \nto automate, analyse, extend and combine Mezzanine with other services.",
            "title": "Endpoint Resources"
        },
        {
            "location": "/#pagination",
            "text": "In order to handle large datasets, pagination is employed. To be consistent, all  listing  type endpoints \nprovide a structure that allows for pagination. Please use a \"page\" parameter to fetch multiple pages of records. For\n example listing categories with  categories?page=2  will return a JSON structure similar to this:  {\n    \"count\": ...,\n    \"next\": \"http://127.0.0.1:8000/api/categories?page=3\",\n    \"previous\": \"http://127.0.0.1:8000/api/categories\",\n    \"results\": [\n        {\n            ...\n        }\n    ]\n}",
            "title": "Pagination"
        },
        {
            "location": "/#permissions",
            "text": "Blog posts and categories may be created or updated over the API by a  superuser . This enables you to make new blog posts, for \nexample, using your own innovative frontend or web hooks. Note that this writable access is currently an experimental \nfeature and should be used with caution. There are plans to gradually open up the rest of the API for write access over forthcoming releases.   Note that the  users  resource is provided so that you can carry out tasks such as retrieving the current user's \ndetails, view a blog post author's name, and list suggested usernames for predicted text entry. For privacy, the email \nfield can only be accessed by the relevant owner or a  superuser . However, the author's full name is accessible to all\nby default (if provided) since blogs tend to operate on a real name basis. If you wish to customize this, take a look \nat the  UserSerializer  class.",
            "title": "Permissions"
        },
        {
            "location": "/#secure-communication",
            "text": "You SHOULD use HTTPS in production!  In this guide, we consider a development environment on a local machine and connect to the server over HTTP. Whereas for production, you SHOULD use HTTPS for secure communication over the internet. Without it, all the API and Mezzanine authentication mechanisms can be compromised.",
            "title": "Secure communication"
        },
        {
            "location": "/#authenticate-with-sessions",
            "text": "Session authentication is enabled by default. It can be disabled by commenting out the relevant line in  settings.py . If you wish to use session based authentication for write access as well as read access, you will need to setup a valid CSRF token for any PUT or POST requests. See the  Django CSRF documentation  for more details.",
            "title": "Authenticate with sessions"
        },
        {
            "location": "/#authenticate-with-oauth2",
            "text": "",
            "title": "Authenticate with OAuth2"
        },
        {
            "location": "/#register",
            "text": "Open up  http://127.0.0.1:8000/api/oauth2/applications/register/  in your browser. (If you are using API version  = 0.3.0, you may experience a 404 error. To resolve this, add the line  LOGIN_URL = \"/api/auth/login/\"  to your  settings.py .)  Go ahead and register a new OAuth application. Just enter a reference name, choose  confidential  client type and  ...password-based  authorization grant type:   Request your access token to use for API authentication:  $ curl -X POST -H \"Accept: application/json; indent=4\" \\\n  -d \"grant_type=password username= username password= password \" -u\" client_id : client_secret \" \\\n  http://localhost:8000/api/oauth2/token/  For  client_id  and  client_secret , copy and paste those that you were given in the previous step. The  username  and  password  are the credentials of the Mezzanine user you wish to login as. You will get a JSON response like:  {\n    \"access_token\": \" your_access_token \",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 36000,\n    \"refresh_token\": \" your_refresh_token \",\n    \"scope\": \"read write groups\"\n}",
            "title": "Register"
        },
        {
            "location": "/#test",
            "text": "The following test should  fail  (i.e. no user listings shown) if you are not currently authenticated:  $ curl http://localhost:8000/api/users\n\n{\n    \"detail\": \"Authentication credentials were not provided.\"\n}  The following authenticated test should  succeed  and show you a list of users if you registered OAuth with a  superuser  account:      $ curl -H \"Authorization: Bearer  your_access_token \" http://localhost:8000/api/users  You can also test your access token by entering it at the top of your interactive  API Resource Documentation  page.",
            "title": "Test"
        },
        {
            "location": "/#getting-help",
            "text": "If you have questions about the API, consider leaving a message in our  Gitter chat room  or using the general  Mezzanine discussion group .  Otherwise, if you think you have found a bug, please use  GitHub issues  and include the steps necessary to reproduce\n it.",
            "title": "Getting help"
        },
        {
            "location": "/#contributing",
            "text": "Mezzanine API is an open source project managed using the Git version control system. The repository is hosted\non  GitHub , so contributing is as easy as forking the project and committing back your enhancements.",
            "title": "Contributing"
        },
        {
            "location": "/#roadmap",
            "text": "Refinement  Gradual roll-out of writeable API access  More tests  Further documentation  Example API client",
            "title": "Roadmap"
        },
        {
            "location": "/release-notes/",
            "text": "Release Notes\n\n\n\n\nUpgrading\n\n\nTo upgrade Mezzanine API to the latest version, use pip:\n\n\npip install -U mezzanine-api\n\n\n\nYou can determine your currently installed version using \npip freeze\n:\n\n\n$ pip freeze | grep mezzanine-api\n\n\n\nVersion 0.4.0 (2016-03-02)\n\n\n\n\nAdd superuser write access (POST and PUT) for blog posts\n\n\nAdd support for Mezzanine 4.1.0, Django 1.9, and latest versions of other dependencies\n\n\nSwitch test suite from factory to client based tests\n\n\nAdd tests for blog posts\n\n\nUpdate docs\n\n\n\n\nVersion 0.3.0 (2015-05-17)\n\n\n\n\nAdd superuser write access (POST and PUT) for categories\n\n\nAdd site endpoint\n\n\nAdd themes\n\n\nUpdate filters\n\n\nUpdate permission handling and security\n\n\nUpdate settings\n\n\nExpose more model fields to API",
            "title": "Release notes"
        },
        {
            "location": "/release-notes/#release-notes",
            "text": "",
            "title": "Release Notes"
        },
        {
            "location": "/release-notes/#upgrading",
            "text": "To upgrade Mezzanine API to the latest version, use pip:  pip install -U mezzanine-api  You can determine your currently installed version using  pip freeze :  $ pip freeze | grep mezzanine-api",
            "title": "Upgrading"
        },
        {
            "location": "/release-notes/#version-040-2016-03-02",
            "text": "Add superuser write access (POST and PUT) for blog posts  Add support for Mezzanine 4.1.0, Django 1.9, and latest versions of other dependencies  Switch test suite from factory to client based tests  Add tests for blog posts  Update docs",
            "title": "Version 0.4.0 (2016-03-02)"
        },
        {
            "location": "/release-notes/#version-030-2015-05-17",
            "text": "Add superuser write access (POST and PUT) for categories  Add site endpoint  Add themes  Update filters  Update permission handling and security  Update settings  Expose more model fields to API",
            "title": "Version 0.3.0 (2015-05-17)"
        }
    ]
}