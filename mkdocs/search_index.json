{
    "docs": [
        {
            "location": "/",
            "text": "Mezzanine API\n\n\nOverview\n\n\nMezzanine API is a \nRESTful web API\n for the popular \nMezzanine\n content management platform. It is built upon the \nDjango\n framework, using \nJSON\n for serialization and \nOAuth2\n for secure authentication. The API empowers developers to \nautomate, extend and combine Mezzanine with other services\n such as mobile apps.\n\n\nWhy use the API?\n\n\n\n\nFreedom\n: build mobile, web, or server apps and use whatever programming language you want\n\n\nSpeed\n: harness a significant speed advantage over Mezzanine's Python based page views\n\n\n\n\nAccess all the data your app needs\n\n\nIntuitive REST API resources for posts, categories, comments, pages, users, and site/app metadata. Retrieving or updating data involves simply sending a HTTP request.\n\n\nIndustry standard security\n\n\nOAuth2, the industry standard for API authentication, allows users to authorize and revoke access to third party applications without the need for those applications to request the user's confidential credentials.\n\n\nEasily filter and search content\n\n\nApply filters such as \nposts?date_min=2015-01-01\ncategory=2\n or search \nposts?search=fitness\n to narrow down results. Results are paginated to handle large datasets.\n\n\nInteractive endpoint documentation\n\n\nThe best way to learn about the API resources is via the interactive endpoint documentation which utilizes the popular \nSwagger \nUI\n.\n\n\n\n\n\n\nInstallation\n\n\nIn order to install Mezzanine API you'll need \nPython\n installed on your system, as well as the \nMezzanine\n CMS.  \n\n\n\n\n\n\nInstall the \nmezzanine-api\n package using pip:\n\n\n$ pip install --upgrade mezzanine-api\n\n\n\n\n\n\n\n\nAdd the following apps in this order to \nINSTALLED_APPS\n in your Mezzanine \nsettings.py\n:\n\n\nINSTALLED_APPS = (\n    ...\n    'mezzanine_api',\n    'rest_framework',\n    'rest_framework_swagger',\n    'oauth2_provider',\n)\n\n\n\n\n\n\n\n\nAlso, add the following lines at the end of your \nsettings.py\n module:\n\n\n#####################\n# REST API SETTINGS #\n#####################\ntry:\n    from mezzanine_api.settings import *\nexcept ImportError as e:\n    pass\n\n\n\n\n\n\n\n\nFor Mezzanine 4.1.0 and above, add the following code in your Mezzanine \nurls.py\n somewhere after \nurlpatterns += [\n (approx line 29):\n\n\n# REST API URLs\nurl(\n^api/\n, include(\nmezzanine_api.urls\n)),\n\n\n\n\n\n\n\n\nMigrate the database to support OAuth2:\n\n\n$ python manage.py migrate\n\n\n\n\n\n\n\n\nStart the server:\n\n\n$ python manage.py runserver\n\n\n\n\n\n\n\n\nRemember to regularly check back here and on \nPyPi\n/\nGithub\n for updates to the documentation and package, respectively. \nUpgrade instructions and release notes\n are also available. \n\n\n\n\nGetting started\n\n\nWe recommend downloading the \nMezzanine Client\n to get started using the API remotely.\n\n\nThe best way to learn about the API resources is via the interactive resource documentation which utilizes the popular \nSwagger \nUI\n. Open up \nhttp://127.0.0.1:8000/api/docs/\n in your browser, and if installation was successfull, you'll see the \ninteractive endpoint resource documentation (refer to above screenshot). Here you can easily test out the \ndifferent kinds of endpoint, method, and query parameter whilst you are learning.\n\n\nAlso, if you attempt to access the API itself directly in your browser, you will be shown a browsable web API:\n\n\n\nIn order to explore the restricted parts of the API, you can login via the browsable web API, or \nretrieve your OAuth2 Access Token\n \nto login at the top of the Interactive Resource Documentation page, or \nlogin via command line with \ncurl\n.\n\n\nEnjoy designing a frontend to interact with the REST API using your technology of choice! Alternatively, you can use it \nto automate, analyse, extend and combine Mezzanine with other services.\n\n\nSecure communication\n\n\nYou SHOULD use HTTPS in production!\n\n\nIn this guide, we consider a development environment on a local machine and connect to the server over HTTP. Whereas for production, you SHOULD use HTTPS for secure communication over the internet. Without it, all the API and Mezzanine authentication mechanisms can be compromised.\n\n\nAuthentication\n\n\nThere are three options for authenticating with the API. The most appropriate option can be determined by considering if the API client is:\n\n\n\n\nanother Django app running on the site (such as the built-in browsable API)? Use \nsession\n authentication.\n\n\na desktop/web/mobile client accessing the site externally? Use \nOAuth2\n authentication.\n\n\na very simple external client mainly for development and debugging? Use \nbasic\n authentication.\n\n\n\n\nPlease see the \nAuthentication\n page for further details.\n\n\nPermissions\n\n\nSome parts of the API are restricted and require authentication as a Mezzanine \nuser\n or \nsuperuser\n.\n\n\nBlog posts and categories may be created or updated over the API by a \nsuperuser\n. This enables you to make new blog posts, for \nexample, using your own innovative frontend or web hooks. Note that this writable access is currently an experimental \nfeature and should be used with caution. There are plans to gradually open up the rest of the API for write access over forthcoming releases. \n\n\nMember's only pages can only be accessed over the API if the requesting user is authenticated and has permission.\n\n\nThe \nusers\n resource is generally restricted to superusers. However, a user may request to see their own details, and the blog post resource will embed the author's name (if they provided it) since blogs tend to operate on a real name basis. If you wish to customize this, take a look \nat the \nUserSerializer\n class.\n\n\nParameters\n\n\nYour local Resource Documentation at \nhttp://127.0.0.1:8000/api/docs/\n includes a list of all available parameters for each possible request, but this section highlights some of the main categories.\n\n\nFiltering\n\n\nThe Resource Documentation shows you which resources you can filter on, and what to include in your URL query string. \nFor example, to view only blog posts that mention fitness, use \n/posts?search=fitness\n.\n\n\nPagination\n\n\nIn order to handle large datasets, pagination is employed. To be consistent, all \nlisting\n type endpoints \nprovide a structure that allows for pagination. Please use a \"page\" parameter to fetch multiple pages of records. For\n example listing categories with \ncategories?page=2\n will return a JSON structure similar to this:\n\n\n{\n    \ncount\n: 30,\n    \nnext\n: \nhttp://127.0.0.1:8000/api/categories?page=3\n,\n    \nprevious\n: \nhttp://127.0.0.1:8000/api/categories\n,\n    \nresults\n: [{ ... }]\n}\n\n\n\n\nGetting help\n\n\nIf you have questions about the API, consider leaving a message in our \nGitter chat room\n or using the general \nMezzanine discussion group\n.\n\n\nOtherwise, if you think you have found a bug, please use \nGitHub issues\n and include the steps necessary to reproduce\n it.\n\n\nCustomizing\n\n\nThe API is designed to be as easy as possible to customize by leveraging the \nDjango Rest Framework\n, which has a large active community.\n\n\nContributing\n\n\nMezzanine API is an open source project managed using the Git version control system. The repository is hosted\non \nGitHub\n, so contributing is as easy as forking the project and committing back your enhancements.\n\n\nRoadmap\n\n\nWe're always working to improve the Mezzanine REST API. Check out the list below of planned enhancements for future releases, in no particular order. Tell us what you need from the API via \nTwitter\n or our \nGitter chat room\n so we can prioritize improvements. \n\n\n\n\nRefinement of code and API resources\n\n\nGradual roll-out of writeable API access\n\n\nMore tests\n\n\nFurther documentation\n\n\nExample API client",
            "title": "Mezzanine API"
        },
        {
            "location": "/#mezzanine-api",
            "text": "",
            "title": "Mezzanine API"
        },
        {
            "location": "/#overview",
            "text": "Mezzanine API is a  RESTful web API  for the popular  Mezzanine  content management platform. It is built upon the  Django  framework, using  JSON  for serialization and  OAuth2  for secure authentication. The API empowers developers to  automate, extend and combine Mezzanine with other services  such as mobile apps.",
            "title": "Overview"
        },
        {
            "location": "/#why-use-the-api",
            "text": "Freedom : build mobile, web, or server apps and use whatever programming language you want  Speed : harness a significant speed advantage over Mezzanine's Python based page views",
            "title": "Why use the API?"
        },
        {
            "location": "/#access-all-the-data-your-app-needs",
            "text": "Intuitive REST API resources for posts, categories, comments, pages, users, and site/app metadata. Retrieving or updating data involves simply sending a HTTP request.",
            "title": "Access all the data your app needs"
        },
        {
            "location": "/#industry-standard-security",
            "text": "OAuth2, the industry standard for API authentication, allows users to authorize and revoke access to third party applications without the need for those applications to request the user's confidential credentials.",
            "title": "Industry standard security"
        },
        {
            "location": "/#easily-filter-and-search-content",
            "text": "Apply filters such as  posts?date_min=2015-01-01 category=2  or search  posts?search=fitness  to narrow down results. Results are paginated to handle large datasets.",
            "title": "Easily filter and search content"
        },
        {
            "location": "/#interactive-endpoint-documentation",
            "text": "The best way to learn about the API resources is via the interactive endpoint documentation which utilizes the popular  Swagger \nUI .",
            "title": "Interactive endpoint documentation"
        },
        {
            "location": "/#installation",
            "text": "In order to install Mezzanine API you'll need  Python  installed on your system, as well as the  Mezzanine  CMS.      Install the  mezzanine-api  package using pip:  $ pip install --upgrade mezzanine-api    Add the following apps in this order to  INSTALLED_APPS  in your Mezzanine  settings.py :  INSTALLED_APPS = (\n    ...\n    'mezzanine_api',\n    'rest_framework',\n    'rest_framework_swagger',\n    'oauth2_provider',\n)    Also, add the following lines at the end of your  settings.py  module:  #####################\n# REST API SETTINGS #\n#####################\ntry:\n    from mezzanine_api.settings import *\nexcept ImportError as e:\n    pass    For Mezzanine 4.1.0 and above, add the following code in your Mezzanine  urls.py  somewhere after  urlpatterns += [  (approx line 29):  # REST API URLs\nurl( ^api/ , include( mezzanine_api.urls )),    Migrate the database to support OAuth2:  $ python manage.py migrate    Start the server:  $ python manage.py runserver    Remember to regularly check back here and on  PyPi / Github  for updates to the documentation and package, respectively.  Upgrade instructions and release notes  are also available.",
            "title": "Installation"
        },
        {
            "location": "/#getting-started",
            "text": "We recommend downloading the  Mezzanine Client  to get started using the API remotely.  The best way to learn about the API resources is via the interactive resource documentation which utilizes the popular  Swagger \nUI . Open up  http://127.0.0.1:8000/api/docs/  in your browser, and if installation was successfull, you'll see the \ninteractive endpoint resource documentation (refer to above screenshot). Here you can easily test out the \ndifferent kinds of endpoint, method, and query parameter whilst you are learning.  Also, if you attempt to access the API itself directly in your browser, you will be shown a browsable web API:  In order to explore the restricted parts of the API, you can login via the browsable web API, or  retrieve your OAuth2 Access Token  \nto login at the top of the Interactive Resource Documentation page, or  login via command line with  curl .  Enjoy designing a frontend to interact with the REST API using your technology of choice! Alternatively, you can use it \nto automate, analyse, extend and combine Mezzanine with other services.",
            "title": "Getting started"
        },
        {
            "location": "/#secure-communication",
            "text": "You SHOULD use HTTPS in production!  In this guide, we consider a development environment on a local machine and connect to the server over HTTP. Whereas for production, you SHOULD use HTTPS for secure communication over the internet. Without it, all the API and Mezzanine authentication mechanisms can be compromised.",
            "title": "Secure communication"
        },
        {
            "location": "/#authentication",
            "text": "There are three options for authenticating with the API. The most appropriate option can be determined by considering if the API client is:   another Django app running on the site (such as the built-in browsable API)? Use  session  authentication.  a desktop/web/mobile client accessing the site externally? Use  OAuth2  authentication.  a very simple external client mainly for development and debugging? Use  basic  authentication.   Please see the  Authentication  page for further details.",
            "title": "Authentication"
        },
        {
            "location": "/#permissions",
            "text": "Some parts of the API are restricted and require authentication as a Mezzanine  user  or  superuser .  Blog posts and categories may be created or updated over the API by a  superuser . This enables you to make new blog posts, for \nexample, using your own innovative frontend or web hooks. Note that this writable access is currently an experimental \nfeature and should be used with caution. There are plans to gradually open up the rest of the API for write access over forthcoming releases.   Member's only pages can only be accessed over the API if the requesting user is authenticated and has permission.  The  users  resource is generally restricted to superusers. However, a user may request to see their own details, and the blog post resource will embed the author's name (if they provided it) since blogs tend to operate on a real name basis. If you wish to customize this, take a look \nat the  UserSerializer  class.",
            "title": "Permissions"
        },
        {
            "location": "/#parameters",
            "text": "Your local Resource Documentation at  http://127.0.0.1:8000/api/docs/  includes a list of all available parameters for each possible request, but this section highlights some of the main categories.",
            "title": "Parameters"
        },
        {
            "location": "/#filtering",
            "text": "The Resource Documentation shows you which resources you can filter on, and what to include in your URL query string. \nFor example, to view only blog posts that mention fitness, use  /posts?search=fitness .",
            "title": "Filtering"
        },
        {
            "location": "/#pagination",
            "text": "In order to handle large datasets, pagination is employed. To be consistent, all  listing  type endpoints \nprovide a structure that allows for pagination. Please use a \"page\" parameter to fetch multiple pages of records. For\n example listing categories with  categories?page=2  will return a JSON structure similar to this:  {\n     count : 30,\n     next :  http://127.0.0.1:8000/api/categories?page=3 ,\n     previous :  http://127.0.0.1:8000/api/categories ,\n     results : [{ ... }]\n}",
            "title": "Pagination"
        },
        {
            "location": "/#getting-help",
            "text": "If you have questions about the API, consider leaving a message in our  Gitter chat room  or using the general  Mezzanine discussion group .  Otherwise, if you think you have found a bug, please use  GitHub issues  and include the steps necessary to reproduce\n it.",
            "title": "Getting help"
        },
        {
            "location": "/#customizing",
            "text": "The API is designed to be as easy as possible to customize by leveraging the  Django Rest Framework , which has a large active community.",
            "title": "Customizing"
        },
        {
            "location": "/#contributing",
            "text": "Mezzanine API is an open source project managed using the Git version control system. The repository is hosted\non  GitHub , so contributing is as easy as forking the project and committing back your enhancements.",
            "title": "Contributing"
        },
        {
            "location": "/#roadmap",
            "text": "We're always working to improve the Mezzanine REST API. Check out the list below of planned enhancements for future releases, in no particular order. Tell us what you need from the API via  Twitter  or our  Gitter chat room  so we can prioritize improvements.    Refinement of code and API resources  Gradual roll-out of writeable API access  More tests  Further documentation  Example API client",
            "title": "Roadmap"
        },
        {
            "location": "/authentication/",
            "text": "Authentication\n\n\nThere are three options for authenticating with the API. The most appropriate option can be determined by considering if the API client is:\n\n\n\n\nanother Django app running on the site (such as the built-in browsable API)? Use \nsession\n authentication.\n\n\na desktop/web/mobile client accessing the site externally? Use \nOAuth2\n authentication.\n\n\na very simple external client mainly for development and debugging? Use \nbasic\n authentication.\n\n\n\n\nIn the following sections, we explore how these different approaches can be used. It is assumed that you have already created a superuser account in Mezzanine.\n\n\nOAuth2 authentication\n\n\nOAuth2 is the industry standard for API authentication and should be used to handle external API clients. \nWith OAuth authentication, users can login to the OAuth2 App Manager and generate access tokens to authorize clients to access the API on their behalf. \nThis access can be revoked by users at any point, for example if the access token falls into the wrong hands. \nA fresh access token can then be easily generated if neccessary.\n\n\nCreating an app\n\n\nOpen up the local OAuth2 App Manager at \nhttp://127.0.0.1:8000/api/oauth2/applications/register/\n in your browser. (If you are using API version \n= 0.3.0, you may experience a 404 error. To resolve this, add the line \nLOGIN_URL = \"/api/auth/login/\"\n to your \nsettings.py\n.)\n\n\nOAuth2 provides \nclient types\n and \ngrant types\n for different API use cases. The client types consider whether a secret can be kept safe on the API client. They are defined as:\n\n\n\n\nConfidential\n for server-side apps running on a web server\n\n\nPublic\n for JavaScript apps running in a web browser, desktop PC/laptop apps, or mobile apps\n\n\n\n\nAnd the available grant types are as follows:\n\n\n\n\nAuthorization Code\n for server-side apps\n\n\nImplicit\n for browser-based or mobile apps\n\n\nPassword\n for logging in with a username and password\n\n\nClient credentials\n for apps to access their own account, outside the context of any specific user\n\n\n\n\nThus, for a mobile client app, we would choose the \nPublic\n client type and the \nImplicit\n grant type. \n\n\nHowever, for this example, we consider a server-side app. Go ahead and register a new OAuth application. Just enter a reference name, choose \nconfidential\n client type and \n\n...password-based\n authorization grant type:\n\n\n\n\nReceiving an Access Token\n\n\nRequest your access token to use for API authentication:\n\n\n$ curl -X POST -H \nAccept: application/json; indent=4\n \\\n  -d \ngrant_type=password\nusername=\nusername\npassword=\npassword\n -u\nclient_id\n:\nclient_secret\n \\\n  http://localhost:8000/api/oauth2/token/\n\n\n\n\nFor \nclient_id\n and \nclient_secret\n, copy and paste those that you were given in the previous step. The \nusername\n and \n\npassword\n are the credentials of the Mezzanine user you wish to login as. You will get a JSON response like:\n\n\n{\n    \naccess_token\n: \n**\nyour_access_token\n**\n,\n     ...\n}\n\n\n\n\nFor security, tokens currently last two weeks and then users will need to re-authenticate with your app once the token expires, or automatically renew the access token using the refresh token flow.\n\n\nTesting an app as client owner\n\n\nThe following test should \nfail\n (i.e. no user listings shown) if you are not currently authenticated:\n\n\n$ curl http://localhost:8000/api/users\n\n{\n    \ndetail\n: \nAuthentication credentials were not provided.\n\n}\n\n\n\n\nThe following authenticated test should \nsucceed\n and show you a list of users if you registered OAuth with a \n\nsuperuser\n account:    \n\n\n$ curl -H \nAuthorization: Bearer \nyour_access_token\n http://localhost:8000/api/users\n\n\n\n\nYou can also test your access token by entering it at the top of your local interactive API Resource Documentation page at \nhttp://127.0.0.1:8000/api/docs/\n.\n\n\nBasic authentication\n\n\nDue to the complexity of OAuth2 authentication, basic authentication can be useful during development. \nHowever, basic authentication requires trusting your sensitive credentials with API client applications and passing your username and password on every request, so it is strongly discouraged for production use.\n\n\nTesting\n\n\nThe following test should \nfail\n (i.e. no user listings shown) if you are not currently authenticated:\n\n\n$ curl http://localhost:8000/api/users\n\n{\n    \ndetail\n: \nAuthentication credentials were not provided.\n\n}\n\n\n\n\nThe following authenticated test should \nsucceed\n and show you a list of users if you enter credentials of a Mezzanine \nsuperuser\n account:    \n\n\n$ curl --user '\nyour_username\n:\nyour_password\n' http://localhost:8000/api/users\n\n\n\n\nSession authentication\n\n\nSession authentication is enabled primarily for the Browsable Web API. If you wish to use session based authentication for write access as well as read access, you will need to setup a valid CSRF token for any PUT or POST requests. See the \nDjango CSRF documentation\n for more details.",
            "title": "Authentication"
        },
        {
            "location": "/authentication/#authentication",
            "text": "There are three options for authenticating with the API. The most appropriate option can be determined by considering if the API client is:   another Django app running on the site (such as the built-in browsable API)? Use  session  authentication.  a desktop/web/mobile client accessing the site externally? Use  OAuth2  authentication.  a very simple external client mainly for development and debugging? Use  basic  authentication.   In the following sections, we explore how these different approaches can be used. It is assumed that you have already created a superuser account in Mezzanine.",
            "title": "Authentication"
        },
        {
            "location": "/authentication/#oauth2-authentication",
            "text": "OAuth2 is the industry standard for API authentication and should be used to handle external API clients. \nWith OAuth authentication, users can login to the OAuth2 App Manager and generate access tokens to authorize clients to access the API on their behalf. \nThis access can be revoked by users at any point, for example if the access token falls into the wrong hands. \nA fresh access token can then be easily generated if neccessary.",
            "title": "OAuth2 authentication"
        },
        {
            "location": "/authentication/#creating-an-app",
            "text": "Open up the local OAuth2 App Manager at  http://127.0.0.1:8000/api/oauth2/applications/register/  in your browser. (If you are using API version  = 0.3.0, you may experience a 404 error. To resolve this, add the line  LOGIN_URL = \"/api/auth/login/\"  to your  settings.py .)  OAuth2 provides  client types  and  grant types  for different API use cases. The client types consider whether a secret can be kept safe on the API client. They are defined as:   Confidential  for server-side apps running on a web server  Public  for JavaScript apps running in a web browser, desktop PC/laptop apps, or mobile apps   And the available grant types are as follows:   Authorization Code  for server-side apps  Implicit  for browser-based or mobile apps  Password  for logging in with a username and password  Client credentials  for apps to access their own account, outside the context of any specific user   Thus, for a mobile client app, we would choose the  Public  client type and the  Implicit  grant type.   However, for this example, we consider a server-side app. Go ahead and register a new OAuth application. Just enter a reference name, choose  confidential  client type and  ...password-based  authorization grant type:",
            "title": "Creating an app"
        },
        {
            "location": "/authentication/#receiving-an-access-token",
            "text": "Request your access token to use for API authentication:  $ curl -X POST -H  Accept: application/json; indent=4  \\\n  -d  grant_type=password username= username password= password  -u client_id : client_secret  \\\n  http://localhost:8000/api/oauth2/token/  For  client_id  and  client_secret , copy and paste those that you were given in the previous step. The  username  and  password  are the credentials of the Mezzanine user you wish to login as. You will get a JSON response like:  {\n     access_token :  ** your_access_token ** ,\n     ...\n}  For security, tokens currently last two weeks and then users will need to re-authenticate with your app once the token expires, or automatically renew the access token using the refresh token flow.",
            "title": "Receiving an Access Token"
        },
        {
            "location": "/authentication/#testing-an-app-as-client-owner",
            "text": "The following test should  fail  (i.e. no user listings shown) if you are not currently authenticated:  $ curl http://localhost:8000/api/users\n\n{\n     detail :  Authentication credentials were not provided. \n}  The following authenticated test should  succeed  and show you a list of users if you registered OAuth with a  superuser  account:      $ curl -H  Authorization: Bearer  your_access_token  http://localhost:8000/api/users  You can also test your access token by entering it at the top of your local interactive API Resource Documentation page at  http://127.0.0.1:8000/api/docs/ .",
            "title": "Testing an app as client owner"
        },
        {
            "location": "/authentication/#basic-authentication",
            "text": "Due to the complexity of OAuth2 authentication, basic authentication can be useful during development. \nHowever, basic authentication requires trusting your sensitive credentials with API client applications and passing your username and password on every request, so it is strongly discouraged for production use.",
            "title": "Basic authentication"
        },
        {
            "location": "/authentication/#testing",
            "text": "The following test should  fail  (i.e. no user listings shown) if you are not currently authenticated:  $ curl http://localhost:8000/api/users\n\n{\n     detail :  Authentication credentials were not provided. \n}  The following authenticated test should  succeed  and show you a list of users if you enter credentials of a Mezzanine  superuser  account:      $ curl --user ' your_username : your_password ' http://localhost:8000/api/users",
            "title": "Testing"
        },
        {
            "location": "/authentication/#session-authentication",
            "text": "Session authentication is enabled primarily for the Browsable Web API. If you wish to use session based authentication for write access as well as read access, you will need to setup a valid CSRF token for any PUT or POST requests. See the  Django CSRF documentation  for more details.",
            "title": "Session authentication"
        },
        {
            "location": "/release-notes/",
            "text": "Release Notes\n\n\nUpgrading\n\n\nTo upgrade Mezzanine API to the latest version, use pip:\n\n\npip install -U mezzanine-api\n\n\n\n\nYou can determine your currently installed version using \npip freeze\n:\n\n\n$ pip freeze | grep mezzanine-api\n\n\n\n\nVersion 0.4.2 (2016-03-14)\n\n\n\n\nFix Issue #3: \nKeyError: 'context'\n\n\n\n\nVersion 0.4.1 (2016-03-07)\n\n\n\n\nAdd logic for updating blog post categories\n\n\nNo longer require title and content fields when updating a blog post\n\n\nRemove dependency on reverse URLs of Mezzanine views when deploying Mezzanine only as an API backend\n\n\nAdd tests for creating and updating blog post categories\n\n\nTidy up API template\n\n\n\n\nVersion 0.4.0 (2016-03-02)\n\n\n\n\nAdd superuser write access (POST and PUT) for blog posts\n\n\nAdd support for Mezzanine 4.1.0, Django 1.9, and latest versions of other dependencies\n\n\nSwitch test suite from factory to client based tests\n\n\nAdd tests for blog posts\n\n\nUpdate docs\n\n\n\n\nVersion 0.3.0 (2015-05-17)\n\n\n\n\nAdd superuser write access (POST and PUT) for categories\n\n\nAdd site endpoint\n\n\nAdd themes\n\n\nUpdate filters\n\n\nUpdate permission handling and security\n\n\nUpdate settings\n\n\nExpose more model fields to API",
            "title": "Release Notes"
        },
        {
            "location": "/release-notes/#release-notes",
            "text": "",
            "title": "Release Notes"
        },
        {
            "location": "/release-notes/#upgrading",
            "text": "To upgrade Mezzanine API to the latest version, use pip:  pip install -U mezzanine-api  You can determine your currently installed version using  pip freeze :  $ pip freeze | grep mezzanine-api",
            "title": "Upgrading"
        },
        {
            "location": "/release-notes/#version-042-2016-03-14",
            "text": "Fix Issue #3:  KeyError: 'context'",
            "title": "Version 0.4.2 (2016-03-14)"
        },
        {
            "location": "/release-notes/#version-041-2016-03-07",
            "text": "Add logic for updating blog post categories  No longer require title and content fields when updating a blog post  Remove dependency on reverse URLs of Mezzanine views when deploying Mezzanine only as an API backend  Add tests for creating and updating blog post categories  Tidy up API template",
            "title": "Version 0.4.1 (2016-03-07)"
        },
        {
            "location": "/release-notes/#version-040-2016-03-02",
            "text": "Add superuser write access (POST and PUT) for blog posts  Add support for Mezzanine 4.1.0, Django 1.9, and latest versions of other dependencies  Switch test suite from factory to client based tests  Add tests for blog posts  Update docs",
            "title": "Version 0.4.0 (2016-03-02)"
        },
        {
            "location": "/release-notes/#version-030-2015-05-17",
            "text": "Add superuser write access (POST and PUT) for categories  Add site endpoint  Add themes  Update filters  Update permission handling and security  Update settings  Expose more model fields to API",
            "title": "Version 0.3.0 (2015-05-17)"
        },
        {
            "location": "/client/",
            "text": "Client SDK\n\n\nMezzanine client is a \nPython SDK\n and \nremote CLI\n for \nMezzanine API\n. It enables a user or service to remotely read or write to Mezzanine CMS using Python or the command line.\n\n\nInstallation\n\n\npip install --upgrade mezzanine-client\n\n\n\n\nGetting Started\n\n\nPrerequisites: install \nMezzanine\n and \nMezzanine API\n either locally or remotely, as we need an API to connect to.\n\n\n\n\nLogin to your Mezzanine CMS Admin Panel\n\n\nIn the menu, click \nOAuth\n \n \nApplications\n\n\nCreate a new application with the following details:\nApp Name: Mezzanine Python Client\nApp Key: key\nApp Secret: secret\nClient Type: Confidential\nGrant Type: Code\n\n\n\n\n\n\n\n\nExamples\n\n\nThe client's \nMezzanine\n class in the \napi\n module contains a set of methods for accessing the API. Some of the most common methods are demonstrated in the following command line interface examples:\n\n\n\n\nposts_list.py\n List published blog posts\n\n\nposts_retrieve.py \npost_id\n Retrieve the specified blog post\n\n\nposts_create.py\n Create a new blog post\n\n\n\n\nStart by downloading the examples included in \nhttps://github.com/gcushen/mezzanine-client-python/archive/master.zip\n , or directly with \nwget\n:\n\n\n$ mkdir mezzanine-client-examples \n cd $_ \n wget https://raw.githubusercontent.com/gcushen/mezzanine-client-python/master/examples/posts_list.py \\\nhttps://raw.githubusercontent.com/gcushen/mezzanine-client-python/master/examples/posts_retrieve.py \\\nhttps://raw.githubusercontent.com/gcushen/mezzanine-client-python/master/examples/posts_create.py\n\n\n\n\nAllow examples to be executed without explicit \npython\n command:\n\n\n$ chmod u+x posts_*.py\n\n\n\n\nPrior to running the examples, export your app key and secret to your terminal environment:\n\n\n$ export MN_ID='key'\n$ export MN_SECRET='secret'\n\n\n\n\nThen run an example:\n\n\n$ ./posts_list.py\n\n\n\n\nThe first time the app attempts to access the API, it will ask you to click a link to authorize it. The web page will redirect you to a page with some data similar to below.\n\n\nargs\n: {\n    \ncode\n: \nvYQqcQSHmqkezX09xh8qflGVYUw6F8\n,\n    \nstate\n: \nEuf91j3H6uEE9VQ9mWsvFC5s3eEMJt\n\n},\n\n\n\n\nThe code in this case is \"vYQqcQSHmqkezX09xh8qflGVYUw6F8\" \nwithout\n the speech marks and should be pasted back into the app within 1 minute to complete the authorization.\n\n\nCommunity\n\n\nChat Room\n - if the room is quiet, feel free to leave a message and someone will try to get back to you.\n\n\nReport a bug or feature request\n for the client.\n\n\nRoadmap\n\n\n\n\nTest suite\n\n\nFurther documentation and examples",
            "title": "Client SDK"
        },
        {
            "location": "/client/#client-sdk",
            "text": "Mezzanine client is a  Python SDK  and  remote CLI  for  Mezzanine API . It enables a user or service to remotely read or write to Mezzanine CMS using Python or the command line.",
            "title": "Client SDK"
        },
        {
            "location": "/client/#installation",
            "text": "pip install --upgrade mezzanine-client",
            "title": "Installation"
        },
        {
            "location": "/client/#getting-started",
            "text": "Prerequisites: install  Mezzanine  and  Mezzanine API  either locally or remotely, as we need an API to connect to.   Login to your Mezzanine CMS Admin Panel  In the menu, click  OAuth     Applications  Create a new application with the following details: App Name: Mezzanine Python Client\nApp Key: key\nApp Secret: secret\nClient Type: Confidential\nGrant Type: Code",
            "title": "Getting Started"
        },
        {
            "location": "/client/#examples",
            "text": "The client's  Mezzanine  class in the  api  module contains a set of methods for accessing the API. Some of the most common methods are demonstrated in the following command line interface examples:   posts_list.py  List published blog posts  posts_retrieve.py  post_id  Retrieve the specified blog post  posts_create.py  Create a new blog post   Start by downloading the examples included in  https://github.com/gcushen/mezzanine-client-python/archive/master.zip  , or directly with  wget :  $ mkdir mezzanine-client-examples   cd $_   wget https://raw.githubusercontent.com/gcushen/mezzanine-client-python/master/examples/posts_list.py \\\nhttps://raw.githubusercontent.com/gcushen/mezzanine-client-python/master/examples/posts_retrieve.py \\\nhttps://raw.githubusercontent.com/gcushen/mezzanine-client-python/master/examples/posts_create.py  Allow examples to be executed without explicit  python  command:  $ chmod u+x posts_*.py  Prior to running the examples, export your app key and secret to your terminal environment:  $ export MN_ID='key'\n$ export MN_SECRET='secret'  Then run an example:  $ ./posts_list.py  The first time the app attempts to access the API, it will ask you to click a link to authorize it. The web page will redirect you to a page with some data similar to below.  args : {\n     code :  vYQqcQSHmqkezX09xh8qflGVYUw6F8 ,\n     state :  Euf91j3H6uEE9VQ9mWsvFC5s3eEMJt \n},  The code in this case is \"vYQqcQSHmqkezX09xh8qflGVYUw6F8\"  without  the speech marks and should be pasted back into the app within 1 minute to complete the authorization.",
            "title": "Examples"
        },
        {
            "location": "/client/#community",
            "text": "Chat Room  - if the room is quiet, feel free to leave a message and someone will try to get back to you.  Report a bug or feature request  for the client.",
            "title": "Community"
        },
        {
            "location": "/client/#roadmap",
            "text": "Test suite  Further documentation and examples",
            "title": "Roadmap"
        }
    ]
}