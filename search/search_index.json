{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mezzanine API \u00b6 Overview \u00b6 Mezzanine API is a RESTful web API for the popular Mezzanine content management platform. It is built upon the Django framework, using JSON for serialization and OAuth2 for secure authentication. The API empowers developers to automate, extend and combine Mezzanine with other services such as mobile apps. Why use the API? \u00b6 Freedom : build mobile, web, or server apps and use whatever programming language you want Speed : harness a significant speed advantage over Mezzanine's Python based page views Access all the data your app needs \u00b6 Intuitive REST API resources for posts, categories, comments, pages, users, and site/app metadata. Retrieving or updating data involves simply sending a HTTP request. Industry standard security \u00b6 OAuth2, the industry standard for API authentication, allows users to authorize and revoke access to third party applications without the need for those applications to request the user's confidential credentials. Easily filter and search content \u00b6 Apply filters such as posts?date_min=2015-01-01&category=2 or search posts?search=fitness to narrow down results. Results are paginated to handle large datasets. Interactive endpoint documentation \u00b6 The best way to learn about the API resources is via the interactive endpoint documentation which utilizes the popular Swagger UI . Installation \u00b6 In this section, we first explain how to create a new CMS API project. Alternatively, the latter sub-sections explain how to install into an existing Mezzanine project, or to install with Docker. Remember to regularly check back here and on PyPi / Github for updates to the documentation and package, respectively. Upgrade instructions and release notes are also available. New Project \u00b6 Once you have Python 3.3+ installed on your system, a new API project can be created by running the following commands: pip install -U mezzanine-api mezzanine-project -a mezzanine_api project_name && cd $_ python manage.py createdb --noinput python manage.py runserver You should then be able to browse to http://127.0.0.1:8000/admin/ and login using the default account (username: admin, password: default). Existing project \u00b6 Assuming you have an existing Mezzanine CMS project, the API can be installed into it as follows: Install the mezzanine-api package using pip: $ pip install -U mezzanine-api Add the following apps in this order to the top of INSTALLED_APPS in your Mezzanine settings.py : INSTALLED_APPS = ( 'mezzanine_api', 'rest_framework', 'django_filters', 'rest_framework_swagger', 'oauth2_provider', ... ) Add the API middleware to the top of MIDDLEWARE in settings.py : MIDDLEWARE = ( 'mezzanine_api.middleware.ApiMiddleware', ... Also, add the following lines in your settings.py module somewhere before the LOCAL SETTINGS block which is near the end: ##################### # REST API SETTINGS # ##################### try : from mezzanine_api.settings import * except ImportError : pass For Mezzanine 4.1.0 and above, add the following code in your Mezzanine urls.py somewhere after urlpatterns += [ (approx line 29): # REST API URLs url(\"^api/\", include(\"mezzanine_api.urls\")), Migrate the database to support OAuth2: $ python manage.py migrate Start the server: $ python manage.py runserver Docker \u00b6 A Docker file is available for the API in a separate Github project. The Docker file is currently in beta and we welcome your feedback. Getting started \u00b6 We recommend installing the Mezzanine Client CLI or Mezzanine Client SDK on your local machine to get started using the API service remotely. The best way to learn about the API resources is via the interactive resource documentation which utilizes the popular Swagger UI . Open up http://127.0.0.1:8000/api/docs/ in your browser, and if installation was successfull, you'll see the interactive endpoint resource documentation (refer to above screenshot). Here you can easily test out the different kinds of endpoint, method, and query parameter whilst you are learning. Also, if you attempt to access the API itself directly in your browser, you will be shown a browsable web API: In order to explore the restricted parts of the API, you can login via the browsable web API, or retrieve your OAuth2 Access Token to login at the top of the Interactive Resource Documentation page, or login via command line with curl . Enjoy designing a frontend to interact with the REST API using your technology of choice! Alternatively, you can use it to automate, analyse, extend and combine Mezzanine with other services. Secure communication \u00b6 You SHOULD use HTTPS in production! In this guide, we consider a development environment on a local machine and connect to the server over HTTP. Whereas for production, you SHOULD use HTTPS for secure communication over the internet. Without it, all the API and Mezzanine authentication mechanisms can be compromised. Authentication \u00b6 There are three options for authenticating with the API. The most appropriate option can be determined by considering if the API client is: another Django app running on the site (such as the built-in browsable API)? Use session authentication. a desktop/web/mobile client accessing the site externally? Use OAuth2 authentication. a very simple external client mainly for development and debugging? Use basic authentication. Please see the Authentication page for further details. Permissions \u00b6 Some parts of the API are restricted and require authentication as a Mezzanine user or superuser . Blog posts and categories may be created or updated over the API by a superuser . This enables you to make new blog posts, for example, using your own innovative frontend or web hooks. Note that this writable access is currently an experimental feature and should be used with caution. There are plans to gradually open up the rest of the API for write access over forthcoming releases. Member's only pages can only be accessed over the API if the requesting user is authenticated and has permission. The users resource is generally restricted to superusers. However, a user may request to see their own details, and the blog post resource will embed the author's name (if they provided it) since blogs tend to operate on a real name basis. If you wish to customize this, take a look at the UserSerializer class. Parameters \u00b6 Your local Resource Documentation at http://127.0.0.1:8000/api/docs/ includes a list of all available parameters for each possible request, but this section highlights some of the main categories. Filtering \u00b6 The Resource Documentation shows you which resources you can filter on, and what to include in your URL query string. For example, to view only blog posts that mention fitness, use /posts?search=fitness . Pagination \u00b6 In order to handle large datasets, pagination is employed. To be consistent, all listing type endpoints provide a structure that allows for pagination. Please use a \"page\" parameter to fetch multiple pages of records. For example listing categories with categories?page=2 will return a JSON structure similar to this: { \"count\": 30, \"next\": \"http://127.0.0.1:8000/api/categories?page=3\", \"previous\": \"http://127.0.0.1:8000/api/categories\", \"results\": [{ ... }] } CORS \u00b6 The API supports requests and responses using Cross-Origin Resource Sharing (CORS). You may want to check out this excellent tutorial for an overview on how to use CORS. By default, API requests are allowed from any origin so you do not need to worry about the URIs of your API and client apps. You may disable this by adding the following line to your local_settings.py : MZN_API_CORS_ORIGIN_ALLOW_ALL = False Getting help \u00b6 If you have questions about the API, consider leaving a message in our Gitter chat room or using the general Mezzanine discussion group . Otherwise, if you think you have found a bug, please use GitHub issues and include the steps necessary to reproduce it. Customizing \u00b6 The API is designed to be as easy as possible to customize by leveraging the Django Rest Framework , which has a large active community. Contributing \u00b6 Mezzanine API is an open source project managed using the Git version control system. The repository is hosted on GitHub , so contributing is as easy as forking the project and committing back your enhancements. Roadmap \u00b6 We're always working to improve the Mezzanine REST API. Check out the list below of planned enhancements for future releases, in no particular order. Tell us what you need from the API via Twitter or our Gitter chat room so we can prioritize improvements. Refinement of code and API resources Gradual roll-out of writeable API access More tests Further documentation Example API client","title":"Mezzanine API"},{"location":"#mezzanine-api","text":"","title":"Mezzanine API"},{"location":"#overview","text":"Mezzanine API is a RESTful web API for the popular Mezzanine content management platform. It is built upon the Django framework, using JSON for serialization and OAuth2 for secure authentication. The API empowers developers to automate, extend and combine Mezzanine with other services such as mobile apps.","title":"Overview"},{"location":"#why-use-the-api","text":"Freedom : build mobile, web, or server apps and use whatever programming language you want Speed : harness a significant speed advantage over Mezzanine's Python based page views","title":"Why use the API?"},{"location":"#access-all-the-data-your-app-needs","text":"Intuitive REST API resources for posts, categories, comments, pages, users, and site/app metadata. Retrieving or updating data involves simply sending a HTTP request.","title":"Access all the data your app needs"},{"location":"#industry-standard-security","text":"OAuth2, the industry standard for API authentication, allows users to authorize and revoke access to third party applications without the need for those applications to request the user's confidential credentials.","title":"Industry standard security"},{"location":"#easily-filter-and-search-content","text":"Apply filters such as posts?date_min=2015-01-01&category=2 or search posts?search=fitness to narrow down results. Results are paginated to handle large datasets.","title":"Easily filter and search content"},{"location":"#interactive-endpoint-documentation","text":"The best way to learn about the API resources is via the interactive endpoint documentation which utilizes the popular Swagger UI .","title":"Interactive endpoint documentation"},{"location":"#installation","text":"In this section, we first explain how to create a new CMS API project. Alternatively, the latter sub-sections explain how to install into an existing Mezzanine project, or to install with Docker. Remember to regularly check back here and on PyPi / Github for updates to the documentation and package, respectively. Upgrade instructions and release notes are also available.","title":"Installation"},{"location":"#new-project","text":"Once you have Python 3.3+ installed on your system, a new API project can be created by running the following commands: pip install -U mezzanine-api mezzanine-project -a mezzanine_api project_name && cd $_ python manage.py createdb --noinput python manage.py runserver You should then be able to browse to http://127.0.0.1:8000/admin/ and login using the default account (username: admin, password: default).","title":"New Project"},{"location":"#existing-project","text":"Assuming you have an existing Mezzanine CMS project, the API can be installed into it as follows: Install the mezzanine-api package using pip: $ pip install -U mezzanine-api Add the following apps in this order to the top of INSTALLED_APPS in your Mezzanine settings.py : INSTALLED_APPS = ( 'mezzanine_api', 'rest_framework', 'django_filters', 'rest_framework_swagger', 'oauth2_provider', ... ) Add the API middleware to the top of MIDDLEWARE in settings.py : MIDDLEWARE = ( 'mezzanine_api.middleware.ApiMiddleware', ... Also, add the following lines in your settings.py module somewhere before the LOCAL SETTINGS block which is near the end: ##################### # REST API SETTINGS # ##################### try : from mezzanine_api.settings import * except ImportError : pass For Mezzanine 4.1.0 and above, add the following code in your Mezzanine urls.py somewhere after urlpatterns += [ (approx line 29): # REST API URLs url(\"^api/\", include(\"mezzanine_api.urls\")), Migrate the database to support OAuth2: $ python manage.py migrate Start the server: $ python manage.py runserver","title":"Existing project"},{"location":"#docker","text":"A Docker file is available for the API in a separate Github project. The Docker file is currently in beta and we welcome your feedback.","title":"Docker"},{"location":"#getting-started","text":"We recommend installing the Mezzanine Client CLI or Mezzanine Client SDK on your local machine to get started using the API service remotely. The best way to learn about the API resources is via the interactive resource documentation which utilizes the popular Swagger UI . Open up http://127.0.0.1:8000/api/docs/ in your browser, and if installation was successfull, you'll see the interactive endpoint resource documentation (refer to above screenshot). Here you can easily test out the different kinds of endpoint, method, and query parameter whilst you are learning. Also, if you attempt to access the API itself directly in your browser, you will be shown a browsable web API: In order to explore the restricted parts of the API, you can login via the browsable web API, or retrieve your OAuth2 Access Token to login at the top of the Interactive Resource Documentation page, or login via command line with curl . Enjoy designing a frontend to interact with the REST API using your technology of choice! Alternatively, you can use it to automate, analyse, extend and combine Mezzanine with other services.","title":"Getting started"},{"location":"#secure-communication","text":"You SHOULD use HTTPS in production! In this guide, we consider a development environment on a local machine and connect to the server over HTTP. Whereas for production, you SHOULD use HTTPS for secure communication over the internet. Without it, all the API and Mezzanine authentication mechanisms can be compromised.","title":"Secure communication"},{"location":"#authentication","text":"There are three options for authenticating with the API. The most appropriate option can be determined by considering if the API client is: another Django app running on the site (such as the built-in browsable API)? Use session authentication. a desktop/web/mobile client accessing the site externally? Use OAuth2 authentication. a very simple external client mainly for development and debugging? Use basic authentication. Please see the Authentication page for further details.","title":"Authentication"},{"location":"#permissions","text":"Some parts of the API are restricted and require authentication as a Mezzanine user or superuser . Blog posts and categories may be created or updated over the API by a superuser . This enables you to make new blog posts, for example, using your own innovative frontend or web hooks. Note that this writable access is currently an experimental feature and should be used with caution. There are plans to gradually open up the rest of the API for write access over forthcoming releases. Member's only pages can only be accessed over the API if the requesting user is authenticated and has permission. The users resource is generally restricted to superusers. However, a user may request to see their own details, and the blog post resource will embed the author's name (if they provided it) since blogs tend to operate on a real name basis. If you wish to customize this, take a look at the UserSerializer class.","title":"Permissions"},{"location":"#parameters","text":"Your local Resource Documentation at http://127.0.0.1:8000/api/docs/ includes a list of all available parameters for each possible request, but this section highlights some of the main categories.","title":"Parameters"},{"location":"#filtering","text":"The Resource Documentation shows you which resources you can filter on, and what to include in your URL query string. For example, to view only blog posts that mention fitness, use /posts?search=fitness .","title":"Filtering"},{"location":"#pagination","text":"In order to handle large datasets, pagination is employed. To be consistent, all listing type endpoints provide a structure that allows for pagination. Please use a \"page\" parameter to fetch multiple pages of records. For example listing categories with categories?page=2 will return a JSON structure similar to this: { \"count\": 30, \"next\": \"http://127.0.0.1:8000/api/categories?page=3\", \"previous\": \"http://127.0.0.1:8000/api/categories\", \"results\": [{ ... }] }","title":"Pagination"},{"location":"#cors","text":"The API supports requests and responses using Cross-Origin Resource Sharing (CORS). You may want to check out this excellent tutorial for an overview on how to use CORS. By default, API requests are allowed from any origin so you do not need to worry about the URIs of your API and client apps. You may disable this by adding the following line to your local_settings.py : MZN_API_CORS_ORIGIN_ALLOW_ALL = False","title":"CORS"},{"location":"#getting-help","text":"If you have questions about the API, consider leaving a message in our Gitter chat room or using the general Mezzanine discussion group . Otherwise, if you think you have found a bug, please use GitHub issues and include the steps necessary to reproduce it.","title":"Getting help"},{"location":"#customizing","text":"The API is designed to be as easy as possible to customize by leveraging the Django Rest Framework , which has a large active community.","title":"Customizing"},{"location":"#contributing","text":"Mezzanine API is an open source project managed using the Git version control system. The repository is hosted on GitHub , so contributing is as easy as forking the project and committing back your enhancements.","title":"Contributing"},{"location":"#roadmap","text":"We're always working to improve the Mezzanine REST API. Check out the list below of planned enhancements for future releases, in no particular order. Tell us what you need from the API via Twitter or our Gitter chat room so we can prioritize improvements. Refinement of code and API resources Gradual roll-out of writeable API access More tests Further documentation Example API client","title":"Roadmap"},{"location":"authentication/","text":"Authentication \u00b6 There are three options for authenticating with the API. The most appropriate option can be determined by considering if the API client is: another Django app running on the site (such as the built-in browsable API)? Use session authentication. a desktop/web/mobile client accessing the site externally? Use OAuth2 authentication. a very simple external client mainly for development and debugging? Use basic authentication. In the following sections, we explore how these different approaches can be used. It is assumed that you have already created a superuser account in Mezzanine. OAuth2 authentication \u00b6 OAuth2 is the industry standard for API authentication and should be used to handle external API clients. With OAuth authentication, users can login to the OAuth2 App Manager and generate access tokens to authorize clients to access the API on their behalf. This access can be revoked by users at any point, for example if the access token falls into the wrong hands. A fresh access token can then be easily generated if neccessary. Creating an app \u00b6 Open up the local OAuth2 App Manager at http://127.0.0.1:8000/api/oauth2/applications/register/ in your browser. (If you are using API version <= 0.3.0, you may experience a 404 error. To resolve this, add the line LOGIN_URL = \"/api/auth/login/\" to your settings.py .) OAuth2 provides client types and grant types for different API use cases. The client types consider whether a secret can be kept safe on the API client. They are defined as: Confidential for server-side apps running on a web server Public for JavaScript apps running in a web browser, desktop PC/laptop apps, or mobile apps And the available grant types are as follows: Authorization Code for server-side apps Implicit for browser-based or mobile apps Password for logging in with a username and password Client credentials for apps to access their own account, outside the context of any specific user Thus, for a mobile client app, we would choose the Public client type and the Implicit grant type. However, for this example, we consider a server-side app. Go ahead and register a new OAuth application. Just enter a reference name, choose confidential client type and ...password-based authorization grant type: Receiving an Access Token \u00b6 Request your access token to use for API authentication: $ curl -X POST -H \"Accept: application/json; indent=4\" \\ -d \"grant_type=password&amp;username=&lt;username&gt;&amp;password=&lt;password&gt;\" -u \"&lt;client_id&gt;:&lt;client_secret&gt;\" \\ http://localhost:8000/api/oauth2/token/ For client_id and client_secret , copy and paste those that you were given in the previous step. The username and password are the credentials of the Mezzanine user you wish to login as. You will get a JSON response like: { \"access_token\": \"**&lt;your_access_token&gt;**\", ... } For security, tokens currently last two weeks and then users will need to re-authenticate with your app once the token expires, or automatically renew the access token using the refresh token flow. Testing an app as client owner \u00b6 The following test should fail (i.e. no user listings shown) if you are not currently authenticated: $ curl http://localhost:8000/api/users { \"detail\" : \"Authentication credentials were not provided.\" } The following authenticated test should succeed and show you a list of users if you registered OAuth with a superuser account: $ curl -H \"Authorization: Bearer &lt;your_access_token&gt;\" http://localhost:8000/api/users You can also test your access token by entering it at the top of your local interactive API Resource Documentation page at http://127.0.0.1:8000/api/docs/ . Basic authentication \u00b6 Due to the complexity of OAuth2 authentication, basic authentication can be useful during development. However, basic authentication requires trusting your sensitive credentials with API client applications and passing your username and password on every request, so it is strongly discouraged for production use. Testing \u00b6 The following test should fail (i.e. no user listings shown) if you are not currently authenticated: $ curl http://localhost:8000/api/users { \"detail\" : \"Authentication credentials were not provided.\" } The following authenticated test should succeed and show you a list of users if you enter credentials of a Mezzanine superuser account: $ curl --user '&lt;your_username&gt;:&lt;your_password&gt;' http://localhost:8000/api/users Session authentication \u00b6 Session authentication is enabled primarily for the Browsable Web API. If you wish to use session based authentication for write access as well as read access, you will need to setup a valid CSRF token for any PUT or POST requests. See the Django CSRF documentation for more details.","title":"Authentication"},{"location":"authentication/#authentication","text":"There are three options for authenticating with the API. The most appropriate option can be determined by considering if the API client is: another Django app running on the site (such as the built-in browsable API)? Use session authentication. a desktop/web/mobile client accessing the site externally? Use OAuth2 authentication. a very simple external client mainly for development and debugging? Use basic authentication. In the following sections, we explore how these different approaches can be used. It is assumed that you have already created a superuser account in Mezzanine.","title":"Authentication"},{"location":"authentication/#oauth2-authentication","text":"OAuth2 is the industry standard for API authentication and should be used to handle external API clients. With OAuth authentication, users can login to the OAuth2 App Manager and generate access tokens to authorize clients to access the API on their behalf. This access can be revoked by users at any point, for example if the access token falls into the wrong hands. A fresh access token can then be easily generated if neccessary.","title":"OAuth2 authentication"},{"location":"authentication/#creating-an-app","text":"Open up the local OAuth2 App Manager at http://127.0.0.1:8000/api/oauth2/applications/register/ in your browser. (If you are using API version <= 0.3.0, you may experience a 404 error. To resolve this, add the line LOGIN_URL = \"/api/auth/login/\" to your settings.py .) OAuth2 provides client types and grant types for different API use cases. The client types consider whether a secret can be kept safe on the API client. They are defined as: Confidential for server-side apps running on a web server Public for JavaScript apps running in a web browser, desktop PC/laptop apps, or mobile apps And the available grant types are as follows: Authorization Code for server-side apps Implicit for browser-based or mobile apps Password for logging in with a username and password Client credentials for apps to access their own account, outside the context of any specific user Thus, for a mobile client app, we would choose the Public client type and the Implicit grant type. However, for this example, we consider a server-side app. Go ahead and register a new OAuth application. Just enter a reference name, choose confidential client type and ...password-based authorization grant type:","title":"Creating an app"},{"location":"authentication/#receiving-an-access-token","text":"Request your access token to use for API authentication: $ curl -X POST -H \"Accept: application/json; indent=4\" \\ -d \"grant_type=password&amp;username=&lt;username&gt;&amp;password=&lt;password&gt;\" -u \"&lt;client_id&gt;:&lt;client_secret&gt;\" \\ http://localhost:8000/api/oauth2/token/ For client_id and client_secret , copy and paste those that you were given in the previous step. The username and password are the credentials of the Mezzanine user you wish to login as. You will get a JSON response like: { \"access_token\": \"**&lt;your_access_token&gt;**\", ... } For security, tokens currently last two weeks and then users will need to re-authenticate with your app once the token expires, or automatically renew the access token using the refresh token flow.","title":"Receiving an Access Token"},{"location":"authentication/#testing-an-app-as-client-owner","text":"The following test should fail (i.e. no user listings shown) if you are not currently authenticated: $ curl http://localhost:8000/api/users { \"detail\" : \"Authentication credentials were not provided.\" } The following authenticated test should succeed and show you a list of users if you registered OAuth with a superuser account: $ curl -H \"Authorization: Bearer &lt;your_access_token&gt;\" http://localhost:8000/api/users You can also test your access token by entering it at the top of your local interactive API Resource Documentation page at http://127.0.0.1:8000/api/docs/ .","title":"Testing an app as client owner"},{"location":"authentication/#basic-authentication","text":"Due to the complexity of OAuth2 authentication, basic authentication can be useful during development. However, basic authentication requires trusting your sensitive credentials with API client applications and passing your username and password on every request, so it is strongly discouraged for production use.","title":"Basic authentication"},{"location":"authentication/#testing","text":"The following test should fail (i.e. no user listings shown) if you are not currently authenticated: $ curl http://localhost:8000/api/users { \"detail\" : \"Authentication credentials were not provided.\" } The following authenticated test should succeed and show you a list of users if you enter credentials of a Mezzanine superuser account: $ curl --user '&lt;your_username&gt;:&lt;your_password&gt;' http://localhost:8000/api/users","title":"Testing"},{"location":"authentication/#session-authentication","text":"Session authentication is enabled primarily for the Browsable Web API. If you wish to use session based authentication for write access as well as read access, you will need to setup a valid CSRF token for any PUT or POST requests. See the Django CSRF documentation for more details.","title":"Session authentication"},{"location":"cli/","text":"Remote Command Line Interface (CLI) \u00b6 Mezzanine Client CLI is a remote CLI for Mezzanine API . It enables a user or service to remotely read or write to Mezzanine CMS using the command line. For example, you can write an article in Markdown on your laptop and type a simple command to automatically upload it and create a new blog post from it on your website. Installation \u00b6 $ pip install -U mezzanine-client Prerequisites \u00b6 Refer to Mezzanine Client Prerequisites . Configuration \u00b6 Generally, you must set at least three configuration options: API URL, OAuth App ID, and OAuth App Secret. These settings correspond to the location of your Mezzanine API instance and your OAuth credentials to authenticate with it (as was discussed further in the above Prerequisites section). $ mezzanine-cli config api_url http://127.0.0.1:8000/api $ mezzanine-cli config client_id id $ mezzanine-cli config client_secret secret You can also see your current configuration and available options by issuing the mezzanine-cli config command without any arguments. Note that the refresh_token setting should not be altered. Authorize the app \u00b6 Run a command that attempts to access the API: $ mezzanine-cli posts list Then follow the guide to authorize the app . Getting started \u00b6 Some examples: # List all posts (most recent first). $ mezzanine-cli posts list # Get the post with the ID of 2. $ mezzanine-cli posts get 2 # Create a post from a Markdown file. $ mezzanine-cli posts create \\ --title='Test Post from API Client' \\ --content-file=~/Desktop/test.md \\ --categories='Test,Fun' \\ --markdown Just add --help to any command in order to get help on the command line: # General help. $ mezzanine-cli # View available options for creating posts. $ mezzanine-cli posts create --help Finally, if you wish to clear the credentials and reset CLI configuration, you can do so by running: $ mezzanine-cli logout Community \u00b6 Join us in the Mezzanine API chat room or leave a message and we will try to get back to you. Feel free to star Mezzanine Client on Github to show your support and monitor updates. Please file a ticket or contribute a pull request on GitHub for bugs or feature requests. Roadmap \u00b6 Add further CLI resources to interact with the API","title":"Remote CLI"},{"location":"cli/#remote-command-line-interface-cli","text":"Mezzanine Client CLI is a remote CLI for Mezzanine API . It enables a user or service to remotely read or write to Mezzanine CMS using the command line. For example, you can write an article in Markdown on your laptop and type a simple command to automatically upload it and create a new blog post from it on your website.","title":"Remote Command Line Interface (CLI)"},{"location":"cli/#installation","text":"$ pip install -U mezzanine-client","title":"Installation"},{"location":"cli/#prerequisites","text":"Refer to Mezzanine Client Prerequisites .","title":"Prerequisites"},{"location":"cli/#configuration","text":"Generally, you must set at least three configuration options: API URL, OAuth App ID, and OAuth App Secret. These settings correspond to the location of your Mezzanine API instance and your OAuth credentials to authenticate with it (as was discussed further in the above Prerequisites section). $ mezzanine-cli config api_url http://127.0.0.1:8000/api $ mezzanine-cli config client_id id $ mezzanine-cli config client_secret secret You can also see your current configuration and available options by issuing the mezzanine-cli config command without any arguments. Note that the refresh_token setting should not be altered.","title":"Configuration"},{"location":"cli/#authorize-the-app","text":"Run a command that attempts to access the API: $ mezzanine-cli posts list Then follow the guide to authorize the app .","title":"Authorize the app"},{"location":"cli/#getting-started","text":"Some examples: # List all posts (most recent first). $ mezzanine-cli posts list # Get the post with the ID of 2. $ mezzanine-cli posts get 2 # Create a post from a Markdown file. $ mezzanine-cli posts create \\ --title='Test Post from API Client' \\ --content-file=~/Desktop/test.md \\ --categories='Test,Fun' \\ --markdown Just add --help to any command in order to get help on the command line: # General help. $ mezzanine-cli # View available options for creating posts. $ mezzanine-cli posts create --help Finally, if you wish to clear the credentials and reset CLI configuration, you can do so by running: $ mezzanine-cli logout","title":"Getting started"},{"location":"cli/#community","text":"Join us in the Mezzanine API chat room or leave a message and we will try to get back to you. Feel free to star Mezzanine Client on Github to show your support and monitor updates. Please file a ticket or contribute a pull request on GitHub for bugs or feature requests.","title":"Community"},{"location":"cli/#roadmap","text":"Add further CLI resources to interact with the API","title":"Roadmap"},{"location":"client/","text":"Client SDK \u00b6 Mezzanine Client is a Python SDK and remote CLI for Mezzanine API . It enables a user or service to remotely read or write to Mezzanine CMS using Python or the command line. For example, you can write an article in Markdown on your laptop and type a simple command to automatically upload it and create a new blog post from it on your website. This page concerns mainly the Python SDK part of the Mezzanine Client package. You can also refer to the CLI page for information on the command line tool. Installation \u00b6 pip install -U mezzanine-client Star the Client on Github to help support further development. You can also watch it on Github to keep track of updates. Prerequisites \u00b6 Install Mezzanine API either locally (for development) or remotely (for production), as we need an API to connect to. Once Mezzanine API is installed, Login to your Mezzanine CMS Admin Panel (e.g. http://127.0.0.1:8000/admin/ ) In the menu, click OAuth > Applications Create a new application with the following details: App Name: Mezzanine Python Client App ID: id App Secret: secret Client Type: Confidential Grant Type: Code Redirect URI: https://httpbin.org/get For development purposes, you can define the simple app ID and secret above, otherwise use the automatically generated ones. Getting started \u00b6 The client's Mezzanine class in the api module contains a set of methods for accessing the API. Some of the most common methods are demonstrated in the following command line interface examples: posts_list.py List published blog posts posts_retrieve.py <post_id> Retrieve the specified blog post posts_create.py Create a new blog post Start by downloading the examples included in https://github.com/gcushen/mezzanine-client-python/archive/master.zip , or directly with wget : $ mkdir mezzanine-client-examples & amp ;& amp ; cd $_ & amp ;& amp ; wget https://raw.githubusercontent.com/gcushen/mezzanine-client-python/master/examples/posts_list.py \\ https://raw.githubusercontent.com/gcushen/mezzanine-client-python/master/examples/posts_retrieve.py \\ https://raw.githubusercontent.com/gcushen/mezzanine-client-python/master/examples/posts_create.py Allow examples to be executed without explicit python command: $ chmod u+x posts_*.py Prior to running the examples, export your app ID and secret to your terminal environment: $ export MZN_ID = 'id' $ export MZN_SECRET = 'secret' Then run an example: $ ./posts_list.py Authorize the app \u00b6 If you have previously used apps for platforms like Facebook, Google, or Twitter, then you may be familiar with the OAuth app authorization process. More specifically, the Mezzanine Client uses the latest OAuth2 code authorization flow. The first time that the Client app attempts to access the API, it will ask you to click a link to authorize it. First you will be taken to the login page on your API website, where you should login using your Mezzanine account: Next, you will be asked if you wish to authorize the Mezzanine Client app: If you confirm the authorization request, you will be given a confirmation code, displayed similar to that below. \"args\": { \"code\": \"vYQqcQSHmqkezX09xh8qflGVYUw6F8\", \"state\": \"Euf91j3H6uEE9VQ9mWsvFC5s3eEMJt\" }, The confirmation code in this case is \"vYQqcQSHmqkezX09xh8qflGVYUw6F8\" without the speech marks and should be pasted back into the app within one hour to complete the authorization. After successful authentication, Mezzanine Client stores the OAuth refresh token in ~/.mezzanine.cfg to prevent you needing to manually re-authenticate every time you run the app. If you wish to completely logout of the app, you can delete this file. Now you can have fun trying some of the CLI or SDK examples! Otherwise, if there were any issues authorizing the app, it is worth checking that you followed all the prerequisite steps. Or for help, refer to the Community section below. Community \u00b6 Chat Room - if the room is quiet, feel free to leave a message and someone will try to get back to you. Report a bug or feature request for the client. Roadmap \u00b6 Test suite Further documentation and examples","title":"Client SDK"},{"location":"client/#client-sdk","text":"Mezzanine Client is a Python SDK and remote CLI for Mezzanine API . It enables a user or service to remotely read or write to Mezzanine CMS using Python or the command line. For example, you can write an article in Markdown on your laptop and type a simple command to automatically upload it and create a new blog post from it on your website. This page concerns mainly the Python SDK part of the Mezzanine Client package. You can also refer to the CLI page for information on the command line tool.","title":"Client SDK"},{"location":"client/#installation","text":"pip install -U mezzanine-client Star the Client on Github to help support further development. You can also watch it on Github to keep track of updates.","title":"Installation"},{"location":"client/#prerequisites","text":"Install Mezzanine API either locally (for development) or remotely (for production), as we need an API to connect to. Once Mezzanine API is installed, Login to your Mezzanine CMS Admin Panel (e.g. http://127.0.0.1:8000/admin/ ) In the menu, click OAuth > Applications Create a new application with the following details: App Name: Mezzanine Python Client App ID: id App Secret: secret Client Type: Confidential Grant Type: Code Redirect URI: https://httpbin.org/get For development purposes, you can define the simple app ID and secret above, otherwise use the automatically generated ones.","title":"Prerequisites"},{"location":"client/#getting-started","text":"The client's Mezzanine class in the api module contains a set of methods for accessing the API. Some of the most common methods are demonstrated in the following command line interface examples: posts_list.py List published blog posts posts_retrieve.py <post_id> Retrieve the specified blog post posts_create.py Create a new blog post Start by downloading the examples included in https://github.com/gcushen/mezzanine-client-python/archive/master.zip , or directly with wget : $ mkdir mezzanine-client-examples & amp ;& amp ; cd $_ & amp ;& amp ; wget https://raw.githubusercontent.com/gcushen/mezzanine-client-python/master/examples/posts_list.py \\ https://raw.githubusercontent.com/gcushen/mezzanine-client-python/master/examples/posts_retrieve.py \\ https://raw.githubusercontent.com/gcushen/mezzanine-client-python/master/examples/posts_create.py Allow examples to be executed without explicit python command: $ chmod u+x posts_*.py Prior to running the examples, export your app ID and secret to your terminal environment: $ export MZN_ID = 'id' $ export MZN_SECRET = 'secret' Then run an example: $ ./posts_list.py","title":"Getting started"},{"location":"client/#authorize-the-app","text":"If you have previously used apps for platforms like Facebook, Google, or Twitter, then you may be familiar with the OAuth app authorization process. More specifically, the Mezzanine Client uses the latest OAuth2 code authorization flow. The first time that the Client app attempts to access the API, it will ask you to click a link to authorize it. First you will be taken to the login page on your API website, where you should login using your Mezzanine account: Next, you will be asked if you wish to authorize the Mezzanine Client app: If you confirm the authorization request, you will be given a confirmation code, displayed similar to that below. \"args\": { \"code\": \"vYQqcQSHmqkezX09xh8qflGVYUw6F8\", \"state\": \"Euf91j3H6uEE9VQ9mWsvFC5s3eEMJt\" }, The confirmation code in this case is \"vYQqcQSHmqkezX09xh8qflGVYUw6F8\" without the speech marks and should be pasted back into the app within one hour to complete the authorization. After successful authentication, Mezzanine Client stores the OAuth refresh token in ~/.mezzanine.cfg to prevent you needing to manually re-authenticate every time you run the app. If you wish to completely logout of the app, you can delete this file. Now you can have fun trying some of the CLI or SDK examples! Otherwise, if there were any issues authorizing the app, it is worth checking that you followed all the prerequisite steps. Or for help, refer to the Community section below.","title":"Authorize the app"},{"location":"client/#community","text":"Chat Room - if the room is quiet, feel free to leave a message and someone will try to get back to you. Report a bug or feature request for the client.","title":"Community"},{"location":"client/#roadmap","text":"Test suite Further documentation and examples","title":"Roadmap"},{"location":"release-notes/","text":"Release Notes \u00b6 Upgrading \u00b6 To upgrade Mezzanine API to the latest version, use pip: pip install -U mezzanine-api You can determine your currently installed version using pip freeze : $ pip freeze | grep mezzanine-api Version 0.7.0 (2018-10-08) \u00b6 This release brings a number of new features as well as adding compatibility for newer versions of dependencies and dropping support for older dependencies. What's New \u00b6 Add support for custom user models List child pages at page endpoint Support filtering pages by title Support filtering posts by multiple categories Fixes \u00b6 Add middleware compatibility for Django v1.11+ Add compatibility for django-oauth-toolkit version 1.1.2+ Add compatibility for django-filter v2+ Update test environment to reflect updated dependencies Fix deprecation warnings from Mezzanine and Django Other \u00b6 Change license from BSD to MIT Drop support for older versions of dependencies Drop support for Python 2 (no longer tested on Python 2, but may still run) Version 0.6.1 (2017-10-30) \u00b6 Fix published blog posts queryset not updating Fix errors caused by latest versions of dependencies Update Setup, Tox, and Travis to support latest dependencies Add description field to post endpoint Version 0.6.0 (2017-01-30) \u00b6 Add gallery_items resource for pages Add support for latest Django Filters (v1) Add support for latest Swagger (v2) Update Tox and Travis for latest dependencies Version 0.5.0 (2016-04-15) \u00b6 Add API middleware (support CORS) Switch from Page Number to Limit Offset Pagination Add project_template for easy API project creation Add Material theme Add Order By filter Fix blog post Field filter Update default settings Advise importing mezzanine_api.settings prior to local_settings.py in Mezzanine's settings.py , as per revised installation docs Version 0.4.2 (2016-03-14) \u00b6 Fix Issue #3: KeyError: 'context' Version 0.4.1 (2016-03-07) \u00b6 Add logic for updating blog post categories No longer require title and content fields when updating a blog post Remove dependency on reverse URLs of Mezzanine views when deploying Mezzanine only as an API backend Add tests for creating and updating blog post categories Tidy up API template Version 0.4.0 (2016-03-02) \u00b6 Add superuser write access (POST and PUT) for blog posts Add support for Mezzanine 4.1.0, Django 1.9, and latest versions of other dependencies Switch test suite from factory to client based tests Add tests for blog posts Update docs Version 0.3.0 (2015-05-17) \u00b6 Add superuser write access (POST and PUT) for categories Add site endpoint Add themes Update filters Update permission handling and security Update settings Expose more model fields to API","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#upgrading","text":"To upgrade Mezzanine API to the latest version, use pip: pip install -U mezzanine-api You can determine your currently installed version using pip freeze : $ pip freeze | grep mezzanine-api","title":"Upgrading"},{"location":"release-notes/#version-070-2018-10-08","text":"This release brings a number of new features as well as adding compatibility for newer versions of dependencies and dropping support for older dependencies.","title":"Version 0.7.0 (2018-10-08)"},{"location":"release-notes/#whats-new","text":"Add support for custom user models List child pages at page endpoint Support filtering pages by title Support filtering posts by multiple categories","title":"What's New"},{"location":"release-notes/#fixes","text":"Add middleware compatibility for Django v1.11+ Add compatibility for django-oauth-toolkit version 1.1.2+ Add compatibility for django-filter v2+ Update test environment to reflect updated dependencies Fix deprecation warnings from Mezzanine and Django","title":"Fixes"},{"location":"release-notes/#other","text":"Change license from BSD to MIT Drop support for older versions of dependencies Drop support for Python 2 (no longer tested on Python 2, but may still run)","title":"Other"},{"location":"release-notes/#version-061-2017-10-30","text":"Fix published blog posts queryset not updating Fix errors caused by latest versions of dependencies Update Setup, Tox, and Travis to support latest dependencies Add description field to post endpoint","title":"Version 0.6.1 (2017-10-30)"},{"location":"release-notes/#version-060-2017-01-30","text":"Add gallery_items resource for pages Add support for latest Django Filters (v1) Add support for latest Swagger (v2) Update Tox and Travis for latest dependencies","title":"Version 0.6.0 (2017-01-30)"},{"location":"release-notes/#version-050-2016-04-15","text":"Add API middleware (support CORS) Switch from Page Number to Limit Offset Pagination Add project_template for easy API project creation Add Material theme Add Order By filter Fix blog post Field filter Update default settings Advise importing mezzanine_api.settings prior to local_settings.py in Mezzanine's settings.py , as per revised installation docs","title":"Version 0.5.0 (2016-04-15)"},{"location":"release-notes/#version-042-2016-03-14","text":"Fix Issue #3: KeyError: 'context'","title":"Version 0.4.2 (2016-03-14)"},{"location":"release-notes/#version-041-2016-03-07","text":"Add logic for updating blog post categories No longer require title and content fields when updating a blog post Remove dependency on reverse URLs of Mezzanine views when deploying Mezzanine only as an API backend Add tests for creating and updating blog post categories Tidy up API template","title":"Version 0.4.1 (2016-03-07)"},{"location":"release-notes/#version-040-2016-03-02","text":"Add superuser write access (POST and PUT) for blog posts Add support for Mezzanine 4.1.0, Django 1.9, and latest versions of other dependencies Switch test suite from factory to client based tests Add tests for blog posts Update docs","title":"Version 0.4.0 (2016-03-02)"},{"location":"release-notes/#version-030-2015-05-17","text":"Add superuser write access (POST and PUT) for categories Add site endpoint Add themes Update filters Update permission handling and security Update settings Expose more model fields to API","title":"Version 0.3.0 (2015-05-17)"}]}